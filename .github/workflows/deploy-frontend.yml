name: Deploy Frontend to EC2

on:
  push:
    branches: [ main ]
    paths:
      - 'resume-frontend/**'
      - '.github/workflows/deploy-frontend.yml'
      - 'Dockerfile'
      - 'docker-compose.frontend.yml'
      - 'nginx.frontend.conf'
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
    
    - name: Check EC2 Instance Status
      run: |
        echo "🔍 Checking EC2 instance connectivity..."
        # Try to get instance status if instance ID is available
        if [ ! -z "${{ secrets.FRONTEND_EC2_INSTANCE_ID }}" ]; then
          aws ec2 describe-instance-status --instance-ids ${{ secrets.FRONTEND_EC2_INSTANCE_ID }} || echo "Could not get instance status"
        fi
        # Test network connectivity
        echo "Testing connectivity to ${{ secrets.FRONTEND_EC2_HOST }}..."
        timeout 5 nc -zv ${{ secrets.FRONTEND_EC2_HOST }} 22 || echo "⚠️ Warning: Cannot connect to SSH port"
      continue-on-error: true
        
    - name: Deploy Frontend to EC2
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.FRONTEND_EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.FRONTEND_EC2_SSH_KEY }}
        timeout: 60s
        command_timeout: 30m
        script: |
          set -Eeuo pipefail
          trap 'echo "❌ Error on line $LINENO. Last command: $BASH_COMMAND"; exit 1' ERR

          echo "🚀 Starting frontend deployment..."
          echo "📍 Current directory: $(pwd)"
          echo "📍 Home directory: $HOME"
          
          # Ensure Docker is running
          if ! docker info >/dev/null 2>&1; then
            echo "❌ Docker is not running"
            sudo systemctl start docker || exit 1
            sleep 5
          fi
          
          # Quick cleanup - only remove really old stuff since we have space now
          echo "🧹 Quick cleanup..."
          docker image prune -af --filter "until=24h" || true
          
          # Use git pull if repo exists, otherwise clone
          cd ~/ai-resume-frontend 2>/dev/null && git pull origin main || {
            rm -rf ~/ai-resume-frontend
            mkdir -p ~/ai-resume-frontend
            cd ~/ai-resume-frontend
            git clone -b main https://github.com/flychicken123/resume_front.git .
          }
          echo "📍 Repository ready at: $(pwd)"
          
          # Check if clone was successful
          if [ ! -f "docker-compose.frontend.yml" ]; then
            echo "Failed to clone repository or docker-compose file missing"
            exit 1
          fi
          
          # Zero-downtime blue-green deployment
          export REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}
          
          # Create external network if it doesn't exist
          docker network create ai-resume-network 2>/dev/null || echo "Network already exists"
          
          # Build new image with timestamp tag
          TIMESTAMP=$(date +%s)
          NEW_TAG="ai-resume-frontend:${TIMESTAMP}"
          
          # Build new container (use cache if available, faster)
          echo "🔨 Building Docker image..."
          docker-compose -f docker-compose.frontend.yml build
          echo "🏷️ Tagging image as ${NEW_TAG}..."
          docker tag ai-resume-frontend-frontend:latest ${NEW_TAG}
          
          # Start new container on different port temporarily
          docker run -d --name "ai-resume-frontend-new-${TIMESTAMP}" \
            --network ai-resume-network \
            -p 3001:3000 \
            -e REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }} \
            ${NEW_TAG}
          
          # Wait for new container to be ready (reduced wait time)
          echo "Waiting for new container to be ready..."
          sleep 5
          
          # Health check new container
          if ! curl -f http://localhost:3001 >/dev/null 2>&1; then
            echo "❌ New container failed health check"
            docker logs "ai-resume-frontend-new-${TIMESTAMP}"
            docker rm -f "ai-resume-frontend-new-${TIMESTAMP}"
            exit 1
          fi
          
          # Switch traffic: stop old container and start new one on port 3000
          echo "Switching traffic to new container..."
          docker stop ai-resume-frontend-frontend-1 2>/dev/null || echo "No old container running"
          docker rm ai-resume-frontend-frontend-1 2>/dev/null || echo "No old container to remove"
          
          # Start new container on production port 3000
          docker stop "ai-resume-frontend-new-${TIMESTAMP}"
          docker run -d --name ai-resume-frontend-frontend-1 \
            --network ai-resume-network \
            -p 3000:3000 \
            -e REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }} \
            ${NEW_TAG}
          
          # Final health check
          sleep 2
          if ! docker ps | grep -q "ai-resume-frontend-frontend-1"; then
            echo "❌ Final container failed to start"
            docker logs ai-resume-frontend-frontend-1
            exit 1
          fi
          
          # Cleanup temporary container
          docker rm "ai-resume-frontend-new-${TIMESTAMP}" 2>/dev/null || echo "Temp container already cleaned"
          
          # Skip public endpoint test (it's slow and not critical)
          echo "🌐 Skipping public endpoint test for speed..."
          
          # Clean up only very old images
          docker image prune -af --filter "until=72h" 2>/dev/null || true
          
          echo "✅ Frontend deployment completed successfully!"
          echo "🚀 Container is running on port 3000"
          docker ps | grep frontend || true
          
    - name: Send deployment notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Frontend deployed successfully to production"
        else
          echo "❌ Frontend deployment failed - check logs"
          exit 1
        fi 