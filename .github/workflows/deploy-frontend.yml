name: Deploy Frontend to EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
        
    - name: Deploy Frontend to EC2
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.FRONTEND_EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.FRONTEND_EC2_SSH_KEY }}
        script: |
          # Update system and install essential packages (handle conflicts)
          sudo yum update -y
          sudo yum install -y git wget --allowerasing || sudo yum install -y git wget --skip-broken
          
          # Install Docker if not installed
          if ! command -v docker &> /dev/null; then
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker ec2-user
          fi
          
          # Install Docker Compose if not installed
          if ! command -v docker-compose &> /dev/null; then
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          
          # Remove existing directory completely and recreate
          rm -rf ~/ai-resume-frontend
          mkdir -p ~/ai-resume-frontend
          cd ~/ai-resume-frontend
          
          # Clone the main branch of the repository using HTTPS (public repo)
          git clone -b main https://github.com/flychicken123/resume_front.git .
          
          # Check if clone was successful
          if [ ! -f "docker-compose.frontend.yml" ]; then
            echo "Failed to clone repository or docker-compose file missing"
            exit 1
          fi
          
          # Zero-downtime blue-green deployment
          export REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}
          
          # Create external network if it doesn't exist
          docker network create ai-resume-network 2>/dev/null || echo "Network already exists"
          
          # Build new image with timestamp tag
          TIMESTAMP=$(date +%s)
          NEW_TAG="ai-resume-frontend:${TIMESTAMP}"
          
          # Build new container with unique name
          docker-compose -f docker-compose.frontend.yml build --no-cache
          docker tag ai-resume-frontend-frontend:latest ${NEW_TAG}
          
          # Start new container on different port temporarily
          docker run -d --name "ai-resume-frontend-new-${TIMESTAMP}" \
            --network ai-resume-network \
            -p 3001:3000 \
            -e REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }} \
            ${NEW_TAG}
          
          # Wait for new container to be ready
          echo "Waiting for new container to be ready..."
          sleep 15
          
          # Health check new container
          if ! curl -f http://localhost:3001 >/dev/null 2>&1; then
            echo "❌ New container failed health check"
            docker logs "ai-resume-frontend-new-${TIMESTAMP}"
            docker rm -f "ai-resume-frontend-new-${TIMESTAMP}"
            exit 1
          fi
          
          # Switch traffic: stop old container and start new one on port 3000
          echo "Switching traffic to new container..."
          docker stop ai-resume-frontend-frontend-1 2>/dev/null || echo "No old container running"
          docker rm ai-resume-frontend-frontend-1 2>/dev/null || echo "No old container to remove"
          
          # Start new container on production port 3000
          docker stop "ai-resume-frontend-new-${TIMESTAMP}"
          docker run -d --name ai-resume-frontend-frontend-1 \
            --network ai-resume-network \
            -p 3000:3000 \
            -e REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }} \
            ${NEW_TAG}
          
          # Final health check
          sleep 5
          if ! docker ps | grep -q "ai-resume-frontend-frontend-1"; then
            echo "❌ Final container failed to start"
            docker logs ai-resume-frontend-frontend-1
            exit 1
          fi
          
          # Cleanup temporary container
          docker rm "ai-resume-frontend-new-${TIMESTAMP}" 2>/dev/null || echo "Temp container already cleaned"
          
          echo "✅ Frontend deployed successfully"
          
          # Clean up
          docker system prune -f 