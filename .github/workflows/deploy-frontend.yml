name: Deploy Frontend to EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
        
    - name: Deploy Frontend to EC2
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.FRONTEND_EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.FRONTEND_EC2_SSH_KEY }}
        script: |
          # Update system and install essential packages (handle conflicts)
          sudo yum update -y
          sudo yum install -y git wget --allowerasing || sudo yum install -y git wget --skip-broken
          
          # Install Docker if not installed
          if ! command -v docker &> /dev/null; then
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker ec2-user
          fi
          
          # Install Docker Compose if not installed
          if ! command -v docker-compose &> /dev/null; then
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          
          # Remove existing directory completely and recreate
          rm -rf ~/ai-resume-frontend
          mkdir -p ~/ai-resume-frontend
          cd ~/ai-resume-frontend
          
          # Clone the main branch of the repository using HTTPS (public repo)
          git clone -b main https://github.com/flychicken123/resume_front.git .
          
          # Debug: Check what files are in the directory
          echo "=== DEBUG: Current directory contents ==="
          ls -la
          echo "=== DEBUG: Current working directory ==="
          pwd
          echo "=== DEBUG: Checking for Dockerfile ==="
          if [ -f "Dockerfile" ]; then
            echo "✅ Dockerfile found"
            cat Dockerfile
          else
            echo "❌ Dockerfile NOT found"
          fi
          echo "=== DEBUG: Checking for docker-compose file ==="
          if [ -f "docker-compose.frontend.yml" ]; then
            echo "✅ docker-compose.frontend.yml found"
            echo "=== DEBUG: docker-compose file contents ==="
            cat docker-compose.frontend.yml
          else
            echo "❌ docker-compose.frontend.yml NOT found"
          fi
          
          # Check if clone was successful
          if [ ! -f "docker-compose.frontend.yml" ]; then
            echo "Failed to clone repository or docker-compose file missing"
            exit 1
          fi
          
          # Stop existing containers
          docker-compose -f docker-compose.frontend.yml down || true
          
          # Create .env file for docker-compose with GitHub secrets
          cat > .env << EOF
          REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}
          NODE_ENV=production
          EOF
          
          # Debug: Show the exact command being run
          echo "=== DEBUG: Running docker-compose build ==="
          echo "Command: docker-compose -f docker-compose.frontend.yml build --no-cache"
          echo "Working directory: $(pwd)"
          echo "Dockerfile exists: $([ -f "Dockerfile" ] && echo "YES" || echo "NO")"
          echo "=== DEBUG: .env file contents ==="
          cat .env
          
          # Build and start containers
          docker-compose -f docker-compose.frontend.yml build --no-cache
          docker-compose -f docker-compose.frontend.yml up -d
          
          # Clean up
          docker system prune -f 