from pathlib import Path
path = Path("src/components/StepPreview.jsx")
text = path.read_text()
start = text.index("  const formatExperiences = () => {")
end = text.index("      .filter(Boolean);", start) + len("      .filter(Boolean);")
new_block = """  const formatExperiences = () => {\n    if (!data.experiences || data.experiences.length === 0) return null;\n\n    const dash = isIndustryManager ? ' – ' : ' - ';\n\n    return data.experiences\n      .map((exp, idx) => {\n        if (!exp.jobTitle && !exp.company) return null;\n\n        const startDate = exp.startDate\n          ? new Date(exp.startDate).toLocaleDateString('en-US', { month: 'short', year: 'numeric' })\n          : '';\n        const endDate = exp.currentlyWorking\n          ? 'Present'\n          : exp.endDate\n          ? new Date(exp.endDate).toLocaleDateString('en-US', { month: 'short', year: 'numeric' })\n          : '';\n        const dateRange = startDate || endDate\n          ? (startDate ? `${startDate}${dash}${endDate || 'Present'}` : endDate)\n          : '';\n\n        const location = exp.remote\n          ? 'Remote'\n          : exp.city && exp.state\n          ? `${toText(exp.city)}, ${toText(exp.state)}`\n          : toText(exp.city) || toText(exp.state) || '';\n\n        const headerSegments = [\n          toText(exp.jobTitle),\n          toText(exp.company),\n          location,\n          dateRange\n        ]\n          .filter(Boolean)\n          .map((segment) => segment.replace(/\s+-\s+/g, ' – '));\n\n        const headerText = isIndustryManager\n          ? headerSegments.join(' | ')\n          : `${toText(exp.jobTitle)} at ${toText(exp.company)}`;\n\n        const secondaryLine = isIndustryManager\n          ? ''\n          : [location, dateRange].filter(Boolean).join(' • ');\n\n        const descriptionContent = exp.description\n          ? (\n              <ul className=\"bullet-points\">\n                {exp.description\n                  .split(/\r?\n/)\n                  .filter((point) => point.trim())\n                  .map((point, pointIdx) => (\n                    <li key={pointIdx}>{point.trim().replace(/^[\\u2022\\u25AA-]+\s*/, '')}</li>\n                  ))}\n              </ul>\n            )\n          : null;\n\n        const contentNode = (\n          <>\n            <div className=\"institution-header\">{headerText}</div>\n            {!isIndustryManager && secondaryLine && (\n              <div className=\"education-details\">{secondaryLine}</div>\n            )}\n            {descriptionContent}\n          </>\n        );\n\n        if (isIndustryManager) {\n          return (\n            <div key={idx} className=\"section-item\">\n              <span className=\"section-item-marker\">▪</span>\n              <div className=\"section-item-body\">{contentNode}</div>\n            </div>\n          );\n        }\n\n        return (\n          <div key={idx} className=\"experience-item\">\n            {contentNode}\n          </div>\n        );\n      })\n      .filter(Boolean);\n  };"""
text = text[:start] + new_block.replace('\n', '\r\n') + text[end:]
path.write_text(text)
