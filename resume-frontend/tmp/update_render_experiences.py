from pathlib import Path
path = Path("src/components/LivePreview.jsx")
text = path.read_text()
start = text.index("  return experiences")
end = text.index("    .filter(Boolean);", start) + len("    .filter(Boolean);")
new_block = """  return experiences\n    .map((exp, idx) => {\n      if (typeof exp === 'string') {\n        const lines = exp.split(/\\r?\\n/);\n        const headerLine = (lines[0] || '').trim();\n        const descriptionLines = lines.slice(1);\n\n        if (!headerLine && descriptionLines.filter((line) => line.trim()).length === 0) {\n          return null;\n        }\n\n        const headerParts = headerLine.split('|').map((part) => part.trim());\n        const jobTitle = headerParts[0] || headerLine || 'Job Title';\n        const company = headerParts[1] || '';\n        const location = headerParts[2] || '';\n        const datePart = headerParts[3] || '';\n\n        const headerText = isIndustryManager\n          ? formatHeaderSegments([jobTitle, company, location, datePart], true)\n          : jobTitle;\n\n        const secondaryLine = !isIndustryManager\n          ? formatHeaderSegments([company, location, datePart])\n          : '';\n\n        const descriptionContent = descriptionLines.filter((line) => line.trim()).length > 0\n          ? (\n              <div style={{ marginTop: '2px' }}>\n                {descriptionLines.map((line, lineIdx) =>\n                  renderBulletLine(line, `${idx}-${lineIdx}`, styles)\n                )}\n              </div>\n            )\n          : null;\n\n        const contentNode = (\n          <>\n            <div style={styles.company}>{headerText}</div>\n            {!isIndustryManager && secondaryLine && (\n              <div style={styles.date}>{secondaryLine}</div>\n            )}\n            {descriptionContent}\n          </>\n        );\n\n        if (isIndustryManager) {\n          return (\n            <div\n              key={idx}\n              style={styles.sectionItem || { display: 'flex', alignItems: 'flex-start', gap: '6px', marginBottom: '6px' }}\n            >\n              <span\n                style={styles.sectionItemMarker || { color: '#39A5B7', fontSize: '8px', lineHeight: '1.2', marginTop: '2px' }}\n              >\n                ▪\n              </span>\n              <div style={styles.sectionItemBody || { flex: 1 }}>{contentNode}</div>\n            </div>\n          );\n        }\n\n        return (\n          <div key={idx} style={styles.item}>\n            {contentNode}\n          </div>\n        );\n      } else {\n        const location = exp.city && exp.state\n          ? `${toText(exp.city)}, ${toText(exp.state)}`\n          : toText(exp.city) || toText(exp.state) || '';\n\n        let startDate = '';\n        let endDate = '';\n        if (exp.startDate) {\n          const startDateObj = new Date(exp.startDate);\n          startDate = startDateObj.toLocaleDateString('en-US', { year: 'numeric', month: 'short' });\n        }\n        if (exp.endDate && !exp.currentlyWorking) {\n          const endDateObj = new Date(exp.endDate);\n          endDate = endDateObj.toLocaleDateString('en-US', { year: 'numeric', month: 'short' });\n        }\n\n        const dateRange = normalizeRange(startDate, endDate, exp.currentlyWorking);\n        const jobTitle = toText(exp.jobTitle) || 'Job Title';\n        const companyName = toText(exp.company) || 'Company';\n        const locationLabel = exp.remote ? 'Remote' : location;\n\n        const headerText = isIndustryManager\n          ? formatHeaderSegments([jobTitle, companyName, locationLabel, dateRange], true)\n          : formatHeaderSegments([jobTitle, companyName, locationLabel, dateRange]);\n\n        const descriptionContent = exp.description\n          ? (\n              <div style={{ marginTop: '2px' }}>\n                {exp.description.split(/\\r?\\n/).map((line, lineIdx) =>\n                  renderBulletLine(line, `${idx}-${lineIdx}`, styles)\n                )}\n              </div>\n            )\n          : null;\n\n        const contentNode = (\n          <>\n            <div style={styles.company}>{headerText}</div>\n            {descriptionContent}\n          </>\n        );\n\n        if (isIndustryManager) {\n          return (\n            <div\n              key={idx}\n              style={styles.sectionItem || { display: 'flex', alignItems: 'flex-start', gap: '6px', marginBottom: '6px' }}\n            >\n              <span\n                style={styles.sectionItemMarker || { color: '#39A5B7', fontSize: '8px', lineHeight: '1.2', marginTop: '2px' }}\n              >\n                ▪\n              </span>\n              <div style={styles.sectionItemBody || { flex: 1 }}>{contentNode}</div>\n            </div>\n          );\n        }\n\n        return (\n          <div key={idx} style={styles.item}>\n            {contentNode}\n          </div>\n        );\n      }\n    })\n    .filter(Boolean);"""
text = text[:start] + new_block.replace('\n', '\r\n') + text[end:]
path.write_text(text)
