from pathlib import Path
path = Path("src/components/StepPreview.jsx")
text = path.read_text()
start = text.index("  const formatEducation = () => {")
end = text.index("      .filter(Boolean);", start) + len("      .filter(Boolean);")
new_block = """  const formatEducation = () => {\n    if (!data.education || data.education.length === 0) return null;\n\n    const dash = isIndustryManager ? ' – ' : ' - ';\n\n    return data.education\n      .map((edu, idx) => {\n        if (!edu.degree && !edu.school) return null;\n\n        if (isIndustryManager) {\n          const degreePart = [toText(edu.degree), edu.field ? toText(edu.field) : '']\n            .filter(Boolean)\n            .join(' in ');\n\n          let dateRange = '';\n          if (edu.startYear && edu.graduationYear) {\n            dateRange = `${edu.startYear}${dash}${edu.graduationYear}`;\n          } else if (edu.graduationYear) {\n            const gradYear = parseInt(edu.graduationYear, 10);\n            dateRange = Number.isNaN(gradYear) ? toText(edu.graduationYear) : `${gradYear - 4}${dash}${gradYear}`;\n          } else if (edu.startDate && edu.endDate) {\n            dateRange = `${toText(edu.startDate)}${dash}${toText(edu.endDate)}`;\n          } else if (edu.endDate) {\n            dateRange = toText(edu.endDate);\n          } else if (edu.startDate) {\n            dateRange = `${toText(edu.startDate)}${dash}Present`;\n          }\n\n          const location = [\n            toText(edu.school),\n            [toText(edu.city), toText(edu.state)].filter(Boolean).join(', ')\n          ]\n            .filter(Boolean)\n            .join(', ');\n\n          const segments = [degreePart, dateRange, location]\n            .filter(Boolean)\n            .map((segment) => segment.replace(/\s+-\s+/g, ' – ').toUpperCase());\n\n          if (segments.length === 0) return null;\n\n          const contentNode = (\n            <div className=\"institution-header\">{segments.join(' | ')}</div>\n          );\n\n          return (\n            <div key={idx} className=\"section-item\">\n              <span className=\"section-item-marker\">▪</span>\n              <div className=\"section-item-body\">{contentNode}</div>\n            </div>\n          );\n        }\n\n        return (\n          <div key={idx} className=\"education-item\">\n            <div className=\"institution-header\">\n              {toText(edu.degree)} {edu.field && `in ${toText(edu.field)}`}\n            </div>\n            <div className=\"education-details\">\n              {toText(edu.school)} • {toText(edu.graduationYear)} {edu.gpa && `• GPA: ${toText(edu.gpa)}`} {edu.honors && `• ${toText(edu.honors)}`}\n            </div>\n          </div>\n        );\n      })\n      .filter(Boolean);\n  };"""
text = text[:start] + new_block.replace('\n', '\r\n') + text[end:]
path.write_text(text)
