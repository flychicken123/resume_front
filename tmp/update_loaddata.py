from pathlib import Path
path = Path("src/pages/AdminMembershipPage.jsx")
text = path.read_text()
marker = "  const loadData = async () => {\n    setLoadingData(true);\n    setError(\"\");\n    try {\n      const [usersRes, plansRes] = await Promise.all([\n        fetch(`${API_BASE_URL}/api/admin/memberships/users`, {\n          headers: getAuthHeaders(),\n        }),\n        fetch(`${API_BASE_URL}/api/plans`),\n      ]);\n\n      const usersJson = await usersRes.json();\n      if (!usersRes.ok) {\n        throw new Error(usersJson.error || \"Failed to load members\");\n      }\n      const fetchedUsers = Array.isArray(usersJson.users) ? usersJson.users : [];\n      setUsers(fetchedUsers);\n      const defaults = {};\n      fetchedUsers.forEach((entry) => {\n        defaults[entry.id] = entry.plan_name || \"free\";\n      });\n      setSelectedPlans(defaults);\n\n      if (plansRes.ok) {\n        const plansJson = await plansRes.json();\n        setPlans(Array.isArray(plansJson.plans) ? plansJson.plans : []);\n      } else {\n        setPlans([]);\n      }\n    } catch (err) {\n      console.error(\"Failed to load admin data\", err);\n      setError(err.message || \"Failed to load admin data\");\n    } finally {\n      setLoadingData(false);\n    }\n  };\n"
if marker not in text:
    raise SystemExit('loadData marker not found')
replacement = "  const loadData = async () => {\n    setLoadingData(true);\n    setError(\"\");\n    try {\n      const [usersRes, plansRes] = await Promise.all([\n        fetch(`${API_BASE_URL}/api/admin/memberships/users`, {\n          headers: getAuthHeaders(),\n        }),\n        fetch(`${API_BASE_URL}/api/plans`),\n      ]);\n\n      const usersJson = await usersRes.json();\n      if (!usersRes.ok) {\n        throw new Error(usersJson.error || \"Failed to load members\");\n      }\n      const fetchedUsers = Array.isArray(usersJson.users) ? usersJson.users : [];\n      setUsers(fetchedUsers);\n      const defaults = {};\n      fetchedUsers.forEach((entry) => {\n        defaults[entry.id] = entry.plan_name || \"free\";\n      });\n      setSelectedPlans(defaults);\n\n      if (plansRes.ok) {\n        const plansJson = await plansRes.json();\n        setPlans(Array.isArray(plansJson.plans) ? plansJson.plans : []);\n      } else {\n        setPlans([]);\n      }\n\n      await loadJobCompanies();\n    } catch (err) {\n      console.error(\"Failed to load admin data\", err);\n      setError(err.message || \"Failed to load admin data\");\n    } finally {\n      setLoadingData(false);\n    }\n  };\n"
text = text.replace(marker, replacement, 1)
path.write_text(text)
