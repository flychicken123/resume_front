from pathlib import Path
path = Path("src/pages/AdminMembershipPage.jsx")
text = path.read_text()
marker = "  const loadJobCompanies = async () => {\n    setJobLoading(true);\n    setJobError('');\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/admin/jobs/companies`, {\n        headers: getAuthHeaders(),\n      });\n      const payload = await response.json();\n      if (!response.ok) {\n        throw new Error(payload.error || 'Failed to load job companies');\n      }\n      setJobCompanies(Array.isArray(payload.companies) ? payload.companies : []);\n    } catch (err) {\n      console.error('Failed to load job companies', err);\n      setJobError(err.message || 'Failed to load job companies');\n    } finally {\n      setJobLoading(false);\n    }\n  };\n"
insert = "\n  const handleNewCompanyChange = (field, value) => {\n    setNewCompany((prev) => ({ ...prev, [field]: value }));\n  };\n\n  const handleCreateCompany = async (event) => {\n    if (event) {\n      event.preventDefault();\n    }\n    setJobError('');\n    setJobMessage('');\n    try {\n      const payload = { ...newCompany };\n      if (!payload.name || !payload.careers_url || !payload.ats_provider) {\n        throw new Error('Name, careers url, and ATS provider are required');\n      }\n      if (typeof payload.sync_interval_minutes !== 'number' || payload.sync_interval_minutes <= 0) {\n        payload.sync_interval_minutes = 180;\n      }\n      const response = await fetch(`${API_BASE_URL}/api/admin/jobs/companies`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          ...getAuthHeaders(),\n        },\n        body: JSON.stringify(payload),\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to create company');\n      }\n      setJobMessage(`Added ${data.company?.name || 'company'} to ATS sync list.`);\n      setNewCompany({\n        name: '',\n        website_url: '',\n        careers_url: '',\n        ats_provider: payload.ats_provider,\n        external_identifier: '',\n        sync_interval_minutes: 180,\n      });\n      await loadJobCompanies();\n    } catch (err) {\n      console.error('Failed to create company', err);\n      setJobError(err.message || 'Failed to create company');\n    }\n  };\n\n  const handleTriggerJobSync = async (companyId) => {\n    setJobError('');\n    setJobMessage('');\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/admin/jobs/companies/${companyId}/sync`, {\n        method: 'POST',\n        headers: getAuthHeaders(),\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to trigger sync');\n      }\n      setJobMessage(`Sync started. Found ${data.result?.jobsFound ?? 0} jobs.`);\n      await loadJobCompanies();\n    } catch (err) {\n      console.error('Failed to trigger job sync', err);\n      setJobError(err.message || 'Failed to trigger job sync');\n    }\n  };\n"
text = text.replace(marker, marker + insert, 1)
path.write_text(text)
